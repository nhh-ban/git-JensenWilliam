install.packages("ggplot2")
# Load the ggplot2 library
library(ggplot2)
# Load the ggplot2 library
library(ggplot2)
# Set a random seed for reproducibility
set.seed(123)
# Generate data for the dataset
num_samples <- 100
workout_intensity <- runif(num_samples, min = 1, max = 10)  # Random workout intensity values between 1 and 10
coach_sick <- rbinom(num_samples, size = 1, prob = 0.2)  # Random coach sickness status (0 = not sick, 1 = sick)
# Create a data frame with the generated data
rowing_data <- data.frame(Workout_Intensity = workout_intensity, Coach_Sick = coach_sick)
# Create a scatter plot
ggplot(rowing_data, aes(x = Workout_Intensity, y = Coach_Sick)) +
geom_point() +
labs(
x = "Workout Intensity",
y = "Coach Sickness (0 = Not Sick, 1 = Sick)",
title = "Correlation Between Workout Intensity and Coach's Sickness"
)
# Load the ggplot2 library
library(ggplot2)
# Set a random seed for reproducibility
set.seed(123)
coach_sick <- rbinom(num_samples, size = 1, prob = 0.8)  # Higher probability of coach being sick (80%)
# Create a data frame with the generated data
rowing_data <- data.frame(Workout_Intensity = workout_intensity, Coach_Sick = coach_sick)
# Create a scatter plot
ggplot(rowing_data, aes(x = Workout_Intensity, y = Coach_Sick)) +
geom_point() +
labs(
x = "Workout Intensity",
y = "Coach Sickness (0 = Not Sick, 1 = Sick)",
title = "Correlation Between Workout Intensity and Coach's Sickness"
)
# Generate data for the dataset
num_samples <- 10000
coach_sick <- rbinom(num_samples, size = 1, prob = 0.8)  # Higher probability of coach being sick (80%)
workout_intensity <- ifelse(coach_sick == 1, runif(num_samples, min = 7, max = 10), runif(num_samples, min = 1, max = 6))
# Create a data frame with the generated data
rowing_data <- data.frame(Workout_Intensity = workout_intensity, Coach_Sick = coach_sick)
# Create a scatter plot
ggplot(rowing_data, aes(x = Workout_Intensity, y = Coach_Sick)) +
geom_point() +
labs(
x = "Workout Intensity",
y = "Coach Sickness (0 = Not Sick, 1 = Sick)",
title = "Correlation Between Workout Intensity and Coach's Sickness"
)
coach_sick <- rbinom(num_samples, size = 1, prob = 0.9)  # Higher probability of coach being sick (80%)
workout_intensity <- ifelse(coach_sick == 1, runif(num_samples, min = 7, max = 10), runif(num_samples, min = 1, max = 6))
# Create a data frame with the generated data
rowing_data <- data.frame(Workout_Intensity = workout_intensity, Coach_Sick = coach_sick)
# Create a scatter plot
ggplot(rowing_data, aes(x = Workout_Intensity, y = Coach_Sick)) +
geom_point() +
labs(
x = "Workout Intensity",
y = "Coach Sickness (0 = Not Sick, 1 = Sick)",
title = "Correlation Between Workout Intensity and Coach's Sickness"
)
workout_intensity <- ifelse(coach_sick == 1, runif(num_samples, min = 7, max = 100), runif(num_samples, min = 1, max = 6))
# Create a data frame with the generated data
rowing_data <- data.frame(Workout_Intensity = workout_intensity, Coach_Sick = coach_sick)
# Create a scatter plot
ggplot(rowing_data, aes(x = Workout_Intensity, y = Coach_Sick)) +
geom_point() +
labs(
x = "Workout Intensity",
y = "Coach Sickness (0 = Not Sick, 1 = Sick)",
title = "Correlation Between Workout Intensity and Coach's Sickness"
)
# This is a test
x = rnorm(100)
raw_file = readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt")
raw_file = readLines("http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt", warn = FALSE)
raw_file
# Importing data
raw_file = readLines(con = "http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt", warn = FALSE)
raw_file
substr(x = raw_file, start = --, stop = --)
substr(x = raw_file, start = "--", stop = "--")
substr(x = raw_file, start = [15], stop = [810])
substr(x = raw_file, start = [15], stop = [810])
substr(x = raw_file, start = 15, stop = 810)
substr(x = raw_file, start = 1, stop = 2)
substr(x = raw_file, start = 1, stop = 2)
L =
which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min()
L = which(substr(x = raw_file, start = 1, stop = 2) == "--") %>% min()
library(dplyr)
L = which(substr(x = raw_file, start = 1, stop = 2) == "--") %>% min()
L = which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min()
L = which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min() +
first_occur = L
L = which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min()
# Save the variable descriptions in a text file
cat(raw_file[1:(L - 2)], sep = "\n", file = "variable_descriptions.txt")
# Save the variable descriptions in a text file
cat(raw_file[1:(L - 2)], sep = "\n", file = "variable_descriptions.txt")
setwd("/Users/williamjensen/Documents/Git/git-JensenWilliam-main")
# Save the variable descriptions in a text file
cat(raw_file[1:(L - 2)], sep = "\n", file = "variable_descriptions.txt")
# Extract the variable names from raw_file[L-1]
variable_names =
str_split(string = raw_file[L - 1], pattern = "\\|") %>%
unlist() %>%
str_trim()
# Extract the variable names from raw_file[L-1]
variable_names =
str_split(string = raw_file[L - 1], pattern = "\\|") %>%
unlist() %>%
trimws()
# Extract the variable names from raw_file[L-1]
# Extract the variable names from raw_file[L-1]
variable_names <-
str_split(string = raw_file[L - 1], pattern = "\\|") %>%
unlist() %>%
trimws()
# Extract the variable names from raw_file[L-1]
variable_names =
strsplit(x = raw_file[L - 1], split = "\\|") %>%
unlist() %>%
trimws()
variable_names
# Combine the data rows into a single string, replace "|" with ",", and remove spaces
comma_separated_values =
raw_file[(L + 1):length(raw_file)] %>%
paste(collapse = "\n") %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
comma_separated_values
new_df_with_names =
c(paste(variable_names, collapse = ","),
comma_separated_values)
raw_file_2 =
c(paste(variable_names, collapse = ","),
comma_separated_values)
raw_file_2
cat(?, sep = "\n", file = "test_df")
cat(test_df, sep = "\n", file = "test_df")
cat(raw_file_2, sep = "\n", file = raw_file_2.csv)
cat(raw_file_2, sep = "\n", file = test)
cat(raw_file_2, sep = "\n", file = raw_file_2)
cat(raw_file_2, sep = "\n", file = raw_file_2.csv)
cat(raw_file_2, sep = "\n", file = raw_file_2)
raw_file_2 =
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Combine the data rows into a single string, replace "|" with ",", and remove spaces
comma_separated_values <-
raw_file[(L + 1):length(raw_file)] %>%
paste(collapse = "\n") %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Combine variable names and data into a vector
raw_file_2 <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Specify the file name for the CSV file
csv_file_name <- "your_file_name.csv"
# Write the combined data with variable names to a CSV file
cat(raw_file_2, sep = "\n", file = csv_file_name)
# Print a message indicating the file has been written
cat("Data with variable names has been saved to", csv_file_name, "\n")
# Loading library
library(tidyverse)
library(dplyr)
# Importing data
raw_file = readLines(con = "http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt", warn = FALSE)
substr(x = raw_file, start = 1, stop = 2)
L =
which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min()
# Save the variable descriptions in a text file
cat(raw_file[1:(L - 2)], sep = "\n", file = "variable_descriptions.txt")
# Extract the variable names from raw_file[L-1]
variable_names =
strsplit(x = raw_file[L - 1], split = "\\|") %>%
unlist() %>%
trimws()
# Combine the data rows into a single string, replace "|" with ",", and remove spaces
comma_separated_values <-
raw_file[(L + 1):length(raw_file)] %>%
paste(collapse = "\n") %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Combine variable names and data into a vector
raw_file_2 <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Specify the file name for the CSV file
csv_file_name <- "your_file_name.csv"
# Write the combined data with variable names to a CSV file
cat(raw_file_2, sep = "\n", file = csv_file_name)
# Print a message indicating the file has been written
cat("Data with variable names has been saved to", csv_file_name, "\n")
# Specify the file name for the CSV file
csv_file <- "raw_file.csv"
# Write the combined data with variable names to a CSV file
cat(raw_file_2, sep = "\n", file = csv_file)
# Print a message indicating the file has been written
cat("Data with variable names has been saved to", csv_file, "\n")
# Read the csv-file back in
galaxies = read_csv("raw_file.csv")
View(galaxies)
View(galaxies)
# Create a scatter plot of linear diameter vs. distance
ggplot(data = galaxy_data, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.2) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
scale_y_continuous(limits = c(0, 15)) +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
scale_y_continuous(limits = c(0, 11)) +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
ylim(0,12)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(0,12)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(1,12)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(2,12)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(2,11)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(2,11.5)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(2,14)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(1,14)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
xlim(1,12)
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
scale_y_continuous(limits = c(0, 11))
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal() +
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
scale_y_continuous(limits = c(0, 11))
# Create a scatter plot of linear diameter vs. distance
# D represents the distance to the galaxy in Mpc, can be considered a spacial position
# 'a_26' represents the linear diameter of the galaxy in kpc.
ggplot(data =  galaxies, aes(x = D, y = a_26)) +
geom_point(alpha = 0.5) +
labs(x = "Distance (Mpc)", y = "Linear Diameter (kpc)") +
ggtitle("Galaxy Linear Diameter vs. Distance") +
theme_minimal()
# Loading library
library(tidyverse)
# Loading library
library(tidyverse)
library(dplyr)
# Importing data
raw_file = readLines(con = "http://www.sao.ru/lv/lvgdb/article/suites_dw_Table1.txt", warn = FALSE)
# Extract the first two characters from each element in the 'raw_file' vector.
substr(x = raw_file, start = 1, stop = 2)
# Finding the line number (L) where the line starts with "--" and pick the first occurrence.
L =
which(substr(x = raw_file, start = 1, stop = 2) == "--") %>%
min()
# Save the variable descriptions in a text file
cat(raw_file[1:(L - 2)], sep = "\n", file = "variable_descriptions.txt")
# Extract the variable names from raw_file[L-1]
variable_names =
strsplit(x = raw_file[L - 1], split = "\\|") %>%
unlist() %>%
trimws()
# Combine the data rows into a single string, replace "|" with ",", and remove spaces
comma_separated_values =
raw_file[(L + 1):length(raw_file)] %>%
paste(collapse = "\n") %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
# Combine variable names and data into a vector
raw_file_2 =
c(paste(variable_names, collapse = ","),
comma_separated_values)
# Specify the file name for the CSV file
csv_file = "raw_file.csv"
# Write the combined data with variable names to a CSV file
cat(raw_file_2, sep = "\n", file = csv_file)
# Print a message indicating the file has been written
cat("Data with variable names has been saved to", csv_file, "\n")
setwd("/Users/williamjensen/Documents/Git/git-JensenWilliam")
setwd("/Users/williamjensen/Documents/Git/git-JensenWilliam")
